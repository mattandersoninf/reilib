{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\Programming\\\\reilib\\\\frontend\\\\src\\\\pages\\\\Layout.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Navbar from '../components/Navbar';\nimport languageData from './lang';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Layout = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const location = useLocation();\n\n  // Function to get the background color based on the current pathname\n  const getBackgroundColor = pathname => {\n    switch (pathname) {\n      case '/':\n        return '#f0f0f0';\n      // Background for the home page\n      case '/login':\n        return '#f7ffe6';\n      // Background for the services page\n      case '/personal':\n        return '/signup';\n      // Background for the contact page\n      default:\n        return '#fff';\n      // Default background color\n    }\n  };\n\n  // Assuming you have a function to get the current language or it's passed as a prop\n  const currentLanguage = 'en'; // Replace with your logic to get the current language\n\n  // Function to get the background image based on the current language\n  const getBackgroundImage = language => {\n    var _languageData$languag;\n    return ((_languageData$languag = languageData[language]) === null || _languageData$languag === void 0 ? void 0 : _languageData$languag.backgroundImage) || 'none';\n  };\n  const backgroundImage = getBackgroundImage(location.pathname, currentLanguage);\n\n  // const backgroundColor = getBackgroundColor(location.pathname);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundImage,\n      minHeight: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(Navbar, {\n        className: `navbar ${isNavbarVisible ? 'visible' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Layout, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useLocation","Navbar","languageData","jsxDEV","_jsxDEV","Layout","_ref","_s","children","location","getBackgroundColor","pathname","currentLanguage","getBackgroundImage","language","_languageData$languag","backgroundImage","style","minHeight","className","isNavbarVisible","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Owner/Documents/Programming/reilib/frontend/src/pages/Layout.js"],"sourcesContent":["import React from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Navbar from '../components/Navbar';\r\nimport languageData from './lang';\r\n\r\nconst Layout = ({ children }) => {\r\n  const location = useLocation();\r\n\r\n  // Function to get the background color based on the current pathname\r\n  const getBackgroundColor = (pathname) => {\r\n    switch (pathname) {\r\n      case '/':\r\n        return '#f0f0f0'; // Background for the home page\r\n      case '/login':\r\n        return '#f7ffe6'; // Background for the services page\r\n      case '/personal':\r\n        return '/signup'; // Background for the contact page\r\n      default:\r\n        return '#fff'; // Default background color\r\n    }\r\n  };\r\n\r\n  // Assuming you have a function to get the current language or it's passed as a prop\r\n  const currentLanguage = 'en'; // Replace with your logic to get the current language\r\n\r\n\r\n  // Function to get the background image based on the current language\r\n  const getBackgroundImage = (language) => {\r\n    return languageData[language]?.backgroundImage || 'none';\r\n  };\r\n\r\n  const backgroundImage = getBackgroundImage(location.pathname, currentLanguage);\r\n\r\n  // const backgroundColor = getBackgroundColor(location.pathname);\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <div style={{ backgroundImage, minHeight: '100vh' }}>\r\n      <header>\r\n        <Navbar className={`navbar ${isNavbarVisible ? 'visible' : ''}`}/>\r\n      </header>\r\n      <main>{children}</main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,YAAY,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC1B,MAAMG,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMU,kBAAkB,GAAIC,QAAQ,IAAK;IACvC,QAAQA,QAAQ;MACd,KAAK,GAAG;QACN,OAAO,SAAS;MAAE;MACpB,KAAK,QAAQ;QACX,OAAO,SAAS;MAAE;MACpB,KAAK,WAAW;QACd,OAAO,SAAS;MAAE;MACpB;QACE,OAAO,MAAM;MAAE;IACnB;EACF,CAAC;;EAED;EACA,MAAMC,eAAe,GAAG,IAAI,CAAC,CAAC;;EAG9B;EACA,MAAMC,kBAAkB,GAAIC,QAAQ,IAAK;IAAA,IAAAC,qBAAA;IACvC,OAAO,EAAAA,qBAAA,GAAAb,YAAY,CAACY,QAAQ,CAAC,cAAAC,qBAAA,uBAAtBA,qBAAA,CAAwBC,eAAe,KAAI,MAAM;EAC1D,CAAC;EAED,MAAMA,eAAe,GAAGH,kBAAkB,CAACJ,QAAQ,CAACE,QAAQ,EAAEC,eAAe,CAAC;;EAE9E;;EAKA,oBACER,OAAA;IAAKa,KAAK,EAAE;MAAED,eAAe;MAAEE,SAAS,EAAE;IAAQ,CAAE;IAAAV,QAAA,gBAClDJ,OAAA;MAAAI,QAAA,eACEJ,OAAA,CAACH,MAAM;QAACkB,SAAS,EAAG,UAASC,eAAe,GAAG,SAAS,GAAG,EAAG;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC,eACTpB,OAAA;MAAAI,QAAA,EAAOA;IAAQ;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACjB,EAAA,CAzCIF,MAAM;EAAA,QACOL,WAAW;AAAA;AAAAyB,EAAA,GADxBpB,MAAM;AA2CZ,eAAeA,MAAM;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}